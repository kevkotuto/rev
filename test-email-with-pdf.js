// Script de test pour l'envoi d'email avec PDF en pi√®ce jointe
// Utiliser dans la console du navigateur

console.log("üìß Test d'envoi d'email avec PDF en pi√®ce jointe")

// Test 1: Envoi avec message personnalis√©
const testEmailWithCustomMessage = async (proformaId, testEmail) => {
  console.log(`üì§ Test d'envoi avec message personnalis√© pour proforma: ${proformaId}`)
  
  const customMessage = `Bonjour,

J'esp√®re que vous allez bien.

Veuillez trouver ci-joint votre proforma au format PDF.

Si vous avez des questions, n'h√©sitez pas √† me contacter.

Cordialement`

  try {
    const response = await fetch('/api/emails/send', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        type: 'invoice',
        to: testEmail,
        subject: `Proforma avec PDF - ${new Date().toLocaleTimeString()}`,
        invoiceId: proformaId,
        attachPDF: true,
        customMessage: customMessage
      })
    })
    
    if (response.ok) {
      const data = await response.json()
      console.log("‚úÖ Email avec PDF envoy√© avec succ√®s:")
      console.log("- Message ID:", data.messageId)
      console.log("- Email ID:", data.emailId)
      console.log("- Type:", data.type)
      return data
    } else {
      const error = await response.json()
      console.error("‚ùå Erreur envoi:", error.message)
    }
  } catch (error) {
    console.error("‚ùå Erreur r√©seau:", error.message)
  }
}

// Test 2: Envoi sans message personnalis√© (template par d√©faut)
const testEmailWithDefaultTemplate = async (proformaId, testEmail) => {
  console.log(`üì§ Test d'envoi avec template par d√©faut pour proforma: ${proformaId}`)
  
  try {
    const response = await fetch('/api/emails/send', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        type: 'invoice',
        to: testEmail,
        subject: `Proforma PDF (template par d√©faut) - ${new Date().toLocaleTimeString()}`,
        invoiceId: proformaId,
        attachPDF: true
        // Pas de customMessage = utilise le template complet
      })
    })
    
    if (response.ok) {
      const data = await response.json()
      console.log("‚úÖ Email avec template par d√©faut envoy√©:")
      console.log("- Message ID:", data.messageId)
      console.log("- Email ID:", data.emailId)
      return data
    } else {
      const error = await response.json()
      console.error("‚ùå Erreur envoi:", error.message)
    }
  } catch (error) {
    console.error("‚ùå Erreur r√©seau:", error.message)
  }
}

// Test 3: V√©rifier la g√©n√©ration de PDF seule
const testPDFGeneration = async (proformaId) => {
  console.log(`üìÑ Test de g√©n√©ration PDF pour proforma: ${proformaId}`)
  
  try {
    const response = await fetch(`/api/proformas/${proformaId}/pdf`)
    
    if (response.ok) {
      const blob = await response.blob()
      console.log("‚úÖ PDF g√©n√©r√© avec succ√®s:")
      console.log("- Taille:", blob.size, "bytes")
      console.log("- Type:", blob.type)
      
      // Optionnel: t√©l√©charger le PDF pour v√©rification
      const url = window.URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `test-proforma-${proformaId}.pdf`
      document.body.appendChild(a)
      a.click()
      window.URL.revokeObjectURL(url)
      document.body.removeChild(a)
      
      console.log("üì• PDF t√©l√©charg√© pour v√©rification")
      return true
    } else {
      const error = await response.json()
      console.error("‚ùå Erreur g√©n√©ration PDF:", error.message)
    }
  } catch (error) {
    console.error("‚ùå Erreur r√©seau:", error.message)
  }
}

// Test 4: V√©rifier les emails envoy√©s en base
const checkSentEmails = async () => {
  console.log("üìä V√©rification des emails envoy√©s...")
  
  try {
    const response = await fetch('/api/emails')
    
    if (response.ok) {
      const emails = await response.json()
      console.log("‚úÖ Emails r√©cents:")
      emails.slice(0, 5).forEach((email, index) => {
        console.log(`${index + 1}. ${email.type} - ${email.to} - ${email.status} - ${new Date(email.createdAt).toLocaleString()}`)
      })
      return emails
    } else {
      console.error("‚ùå Erreur r√©cup√©ration emails")
    }
  } catch (error) {
    console.error("‚ùå Erreur r√©seau:", error.message)
  }
}

// Instructions d'utilisation
console.log(`
üìã Instructions pour tester l'envoi d'email avec PDF:

1. Obtenir un ID de proforma existant:
   - Aller sur /proformas
   - Copier l'ID d'une proforma

2. Tester la g√©n√©ration PDF:
   testPDFGeneration('PROFORMA_ID')

3. Tester l'envoi avec message personnalis√©:
   testEmailWithCustomMessage('PROFORMA_ID', 'test@example.com')

4. Tester l'envoi avec template par d√©faut:
   testEmailWithDefaultTemplate('PROFORMA_ID', 'test@example.com')

5. V√©rifier les emails envoy√©s:
   checkSentEmails()

üîç V√©rifications √† faire:
- ‚úÖ PDF g√©n√©r√© sans erreur
- ‚úÖ Email envoy√© avec pi√®ce jointe
- ‚úÖ Message personnalis√© affich√© correctement
- ‚úÖ Template par d√©faut fonctionnel
- ‚úÖ Email enregistr√© en base avec statut SENT

‚ö†Ô∏è Remplacer 'PROFORMA_ID' par un ID r√©el et 'test@example.com' par votre email de test.
`)

// Export des fonctions pour utilisation manuelle
window.testEmailWithCustomMessage = testEmailWithCustomMessage
window.testEmailWithDefaultTemplate = testEmailWithDefaultTemplate
window.testPDFGeneration = testPDFGeneration
window.checkSentEmails = checkSentEmails

console.log("‚úÖ Script de test charg√©. Utilisez les fonctions ci-dessus pour tester.") 